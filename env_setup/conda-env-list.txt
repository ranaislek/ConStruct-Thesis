# ðŸš¦ Bulletproof Environment Setup Instructions (with `fcd`)

## 1. **Create and Activate Your Conda Environment**

```bash
conda create -y -c conda-forge -n construct python=3.9 rdkit=2023.03.2
conda activate construct
```

---

## 2. **Check RDKit Works**

```bash
python -c "from rdkit import Chem"
# No error means it's fine.
```

---

## 3. **Install graph-tool**

```bash
conda install -c conda-forge graph-tool=2.45
python -c "import graph_tool as gt"
```

---

## 4. **Install PyTorch (CUDA 11.8), then torch-geometric**

```bash
pip install torch==2.0.1 --index-url https://download.pytorch.org/whl/cu118
pip install torch-geometric==2.3.1
python -c "import torch; print(torch.cuda.is_available())"
# Should print True if GPU is visible.
```

---

## 5. **Install fcd (code only, no dependencies)**

```bash
pip install --no-deps fcd
# This gives you fcd.load_ref_model, fcd.get_fcd, etc.
```

---

## 6. **Install the Rest of Your Requirements**

```bash
pip install -r requirements.txt
# (If requirements.txt has torch or rdkit, double check versions donâ€™t get downgraded!)
```

---

## 7. **Install Your Own Package (if needed, e.g., for editable dev mode)**

```bash
pip install -e .
```

---

## 8. **Compile ORCA if Needed**

```bash
cd ./ConStruct/analysis/orca
g++ -O2 -std=c++11 -o orca orca.cpp
cd -
```

---

## 9. **Test Everything**

```bash
python -c "import fcd; print(hasattr(fcd, 'load_ref_model'))"
python -c "import torch; print(torch.cuda.is_available())"
```

Both should print `True` or not error.

---

# ðŸ”— **Summary Table**

| Step                    | Command                                                                       |
| ----------------------- | ----------------------------------------------------------------------------- |
| Create env              | `conda create -y -c conda-forge -n construct python=3.9 rdkit=2023.03.2`      |
| Activate env            | `conda activate construct`                                                    |
| Install graph-tool      | `conda install -c conda-forge graph-tool=2.45`                                |
| Install PyTorch         | `pip install torch==2.0.1 --index-url https://download.pytorch.org/whl/cu118` |
| Install torch-geometric | `pip install torch-geometric==2.3.1`                                          |
| Install fcd             | `pip install --no-deps fcd`                                                   |
| Other packages          | `pip install -r requirements.txt`                                             |
| Your package            | `pip install -e .`                                                            |
| Compile ORCA            | `g++ -O2 -std=c++11 -o orca orca.cpp`                                         |

---

**Donâ€™t use `pip install fcd` without `--no-deps`** after installing torch/rdkit.
**Donâ€™t install `cuda` with conda.**
**Donâ€™t install both `fcd` and `fcd_torch` in the same env unless you know exactly why.**

If you need a ready-to-paste bash script or a formatted README block, let me know!
Otherwise: **youâ€™re ready to roll.**


# if error with fcd:
find $CONDA_PREFIX -name "libstdc++.so.6"
LD_PRELOAD=$CONDA_PREFIX/lib/libstdc++.so.6 python -c "from rdkit import Chem; import fcd; print(hasattr(fcd, 'load_ref_model'))"


Make the Fix Permanent
If the above works, make it automatic every time you activate your env:

mkdir -p $CONDA_PREFIX/etc/conda/activate.d
echo 'export LD_PRELOAD="$CONDA_PREFIX/lib/libstdc++.so.6"' > $CONDA_PREFIX/etc/conda/activate.d/zz_preload_libstdcxx.sh
chmod +x $CONDA_PREFIX/etc/conda/activate.d/zz_preload_libstdcxx.sh

# if error with graph-tool while testing test_env.py:
export LD_PRELOAD="$CONDA_PREFIX/lib/libgomp.so.1"
python test_env.py

mkdir -p $CONDA_PREFIX/etc/conda/activate.d
echo 'export LD_PRELOAD="$CONDA_PREFIX/lib/libgomp.so.1"' > $CONDA_PREFIX/etc/conda/activate.d/zz_preload_libgomp.sh
chmod +x $CONDA_PREFIX/etc/conda/activate.d/zz_preload_libgomp.sh

# if still not works with above, add this to SLURM script (after conda activate) or before every run:
export LD_PRELOAD="$CONDA_PREFIX/lib/libgomp.so.1"

---

## **Quick Cluster Sanity Check Script**

Paste and run these **one by one** in your (construct) environment:

---

### **1. RDKit Basic Import**

```bash
python -c "from rdkit import Chem; print(Chem.MolFromSmiles('CCO') is not None)"
```

Should print `True`.

---

### **2. PyTorch + CUDA Check**

```bash
python -c "import torch; print(torch.__version__); print(torch.cuda.is_available())"
```

Should print your torch version and `True`.

---

### **3. torch-geometric Check**

```bash
python -c "import torch_geometric; print(torch_geometric.__version__)"
```

Should print `2.3.1`.

---

### **4. fcd Import and Model Load**

```bash
python -c "import fcd; print(hasattr(fcd, 'load_ref_model')); m = fcd.load_ref_model(); print(m is not None)"
```

Should print `True` twice.

---

### **5. Your Own Package Import (if applicable)**

```bash
python -c "import ConStruct; print('ConStruct imported\!')"
```

Should print `ConStruct imported!` (no error).

---

### **6. (Optional) Try a minimal fcd score calculation**

```bash
python -c "import fcd; s = fcd.get_fcd(['CCO', 'CCC'], ['CCO', 'CCN']); print('FCD score:', s)"
```

Should print an FCD score (float), **not** an error.

---

## **If all these work:**

* Your environment is **100% functional** for cluster molecular deep learning.
* You have **no hidden dependency or C++/RDKit/libstdc++ issues**.

If **any** step fails, paste the full error hereâ€”otherwise:
**Youâ€™re ready to run your real experiments.**
