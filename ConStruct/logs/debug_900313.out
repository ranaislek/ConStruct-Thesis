torch version: 2.0.1+cu118
CUDA available: True
CUDA device: NVIDIA RTX 2000 Ada Generation
<frozen importlib._bootstrap>:228: RuntimeWarning: to-Python converter for std::pair<double, double> already registered; second conversion method ignored.
[rank: 0] Global seed set to 0
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
[rank: 0] Global seed set to 0
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
Loading reference metrics.
Absorbing transition model with edges
[2025-07-03 13:43:43,031][torch.distributed.distributed_c10d][INFO] - Added key: store_based_barrier_key:1 to store for rank: 0
[2025-07-03 13:43:43,031][torch.distributed.distributed_c10d][INFO] - Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 1 nodes.
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA RTX 2000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name                  | Type                  | Params
----------------------------------------------------------------
0 | train_loss            | TrainLoss             | 0     
1 | train_metrics         | TrainMolecularMetrics | 0     
2 | val_metrics           | MetricCollection      | 0     
3 | val_nll               | NLL                   | 0     
4 | val_sampling_metrics  | SamplingMetrics       | 0     
5 | test_metrics          | MetricCollection      | 0     
6 | test_nll              | NLL                   | 0     
7 | test_sampling_metrics | SamplingMetrics       | 0     
8 | model                 | GraphTransformer      | 1.5 K 
----------------------------------------------------------------
1.5 K     Trainable params
0         Non-trainable params
1.5 K     Total params
0.006     Total estimated model params size (MB)
wandb: Tracking run with wandb version 0.15.4
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
SLURM auto-requeueing enabled. Setting signal handlers.
Epoch 0: val/epoch_NLL: 56.54 -- val/X_kl: 3.35 -- val/E_kl: 43.92 -- val/charges_kl: 1.01 
Val loss: 56.5358 	 Best val loss:  56.5358

Val epoch 0 ends
Starting epoch 0
[2025-07-03 13:43:47,909][torch.nn.parallel.distributed][INFO] - Reducer buckets have been rebuilt in this iteration.
`Trainer.fit` stopped: `max_epochs=1` reached.
[rank: 0] Global seed set to 0
You are using a CUDA device ('NVIDIA RTX 2000 Ada Generation') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
SLURM auto-requeueing enabled. Setting signal handlers.
wandb: Waiting for W&B process to finish... (success).
wandb: 
wandb: Run history:
wandb:                       epoch ▁
wandb:            train/AromaticCE █▆▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:              train/CarbonCE █▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:              train/DoubleCE █▅▃▄▄▄▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:               train/FluorCE █▅▄▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               train/NitroCE █▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:              train/NoBondCE █▅▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 train/OxyCE ▇█▇▇▆▆▆▆▅▅▄▄▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁
wandb:              train/SingleCE ▇██▇▆▅▅▅▄▄▄▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁
wandb:              train/TripleCE █▇▅▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            train_epoch/E_CE ▁
wandb:      train_epoch/charges_CE ▁
wandb: train_epoch/epochAromaticCE ▁
wandb:   train_epoch/epochCarbonCE ▁
wandb:   train_epoch/epochDoubleCE ▁
wandb:    train_epoch/epochFluorCE ▁
wandb:    train_epoch/epochNitroCE ▁
wandb:   train_epoch/epochNoBondCE ▁
wandb:      train_epoch/epochOxyCE ▁
wandb:   train_epoch/epochSingleCE ▁
wandb:   train_epoch/epochTripleCE ▁
wandb:            train_epoch/x_CE ▁
wandb:            train_epoch/y_CE ▁
wandb:             train_loss/E_CE █▆▅▅▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             train_loss/X_CE █▄▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:       train_loss/batch_loss █▆▆▃▃▄▂▄▂▂▃▂▁▃▁▃▄▁▂▃▂▂▁▃▂▃▂▂▃▂▁▃▂▃▂▂▂▂▃▃
wandb:       train_loss/charges_CE █▄▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             train_loss/y_CE ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    val/E_kl ▁█
wandb:                    val/X_kl ▁█
wandb:              val/charges_kl █▁
wandb:               val/epoch_NLL ▁█
wandb: 
wandb: Run summary:
wandb:                       epoch 0
wandb:            train/AromaticCE 0.00504
wandb:              train/CarbonCE 0.57798
wandb:              train/DoubleCE 0.11143
wandb:               train/FluorCE 0.02185
wandb:               train/NitroCE 0.35044
wandb:              train/NoBondCE 0.51799
wandb:                 train/OxyCE 0.42638
wandb:              train/SingleCE 0.48675
wandb:              train/TripleCE 0.0523
wandb:            train_epoch/E_CE 0.64296
wandb:      train_epoch/charges_CE 0.14666
wandb: train_epoch/epochAromaticCE 0.00503
wandb:   train_epoch/epochCarbonCE 0.57797
wandb:   train_epoch/epochDoubleCE 0.11142
wandb:    train_epoch/epochFluorCE 0.02188
wandb:    train_epoch/epochNitroCE 0.35041
wandb:   train_epoch/epochNoBondCE 0.51799
wandb:      train_epoch/epochOxyCE 0.42637
wandb:   train_epoch/epochSingleCE 0.48675
wandb:   train_epoch/epochTripleCE 0.05229
wandb:            train_epoch/x_CE 0.77677
wandb:            train_epoch/y_CE -1.0
wandb:             train_loss/E_CE 3.21493
wandb:             train_loss/X_CE 0.77677
wandb:       train_loss/batch_loss 3.48078
wandb:       train_loss/charges_CE 0.29331
wandb:             train_loss/y_CE -1.0
wandb:                    val/E_kl 107.04414
wandb:                    val/X_kl 3.3841
wandb:              val/charges_kl 0.57798
wandb:               val/epoch_NLL 111.56018
wandb: 
wandb: You can sync this run to the cloud by running:
wandb: wandb sync /extra/rislek/ConStruct-Thesis/wandb/offline-run-20250703_134344-rdlryf0a
wandb: Find logs at: ./wandb/offline-run-20250703_134344-rdlryf0a/logs
wandb: Tracking run with wandb version 0.15.4
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
Epoch 0: val/epoch_NLL: 111.56 -- val/X_kl: 3.38 -- val/E_kl: 107.04 -- val/charges_kl: 0.58 
Val loss: 111.5602 	 Best val loss:  56.5358

Val epoch 0 ends
Train epoch 0 ends
Epoch 0 finished: X: 0.78 -- charges: 0.15 -- E: 0.64 -- y: -1.00 -- 295.0s 
Epoch 0: {'CarbonCE': 0.578, 'NitroCE': 0.35, 'OxyCE': 0.426, 'FluorCE': 0.022} -- {'NoBondCE': 0.518, 'SingleCE': 0.487, 'DoubleCE': 0.111, 'TripleCE': 0.052, 'AromaticCE': 0.005}
Test loss: 111.4470
Epoch 1: test/epoch_NLL: 111.4470 -- test/X_kl: 3.4373 -- test/E_kl: 106.8591 -- test/charges_kl: 0.5952 
Sampling start on GR0
Samples to generate: 1 for each of the 1 devices
Samples to save: 1
Sampling a batch with 1 graphs on local rank 0. Saving 1 visualization and 1 full chains.
Error executing job with overrides: ['+experiment=qm9', 'train.n_epochs=1', 'train.batch_size=8', 'general.samples_to_generate=8']
Traceback (most recent call last):
  File "/extra/rislek/ConStruct-Thesis/ConStruct/main.py", line 152, in main
    trainer.test(model, datamodule=datamodule)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 737, in test
    return call._call_and_handle_interrupt(
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 780, in _test_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 1011, in _run_stage
    return self._evaluation_loop.run()
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/loops/evaluation_loop.py", line 122, in run
    return self.on_run_end()
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/loops/evaluation_loop.py", line 244, in on_run_end
    self._on_evaluation_epoch_end()
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/loops/evaluation_loop.py", line 326, in _on_evaluation_epoch_end
    call._call_lightning_module_hook(trainer, hook_name)
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 140, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "/extra/rislek/ConStruct-Thesis/ConStruct/diffusion_model_discrete.py", line 388, in on_test_epoch_end
    samples = self.sample_n_graphs(
  File "/extra/rislek/ConStruct-Thesis/ConStruct/diffusion_model_discrete.py", line 805, in sample_n_graphs
    self.sample_batch(
  File "/home/rislek/.conda/envs/construct/lib/python3.9/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/extra/rislek/ConStruct-Thesis/ConStruct/diffusion_model_discrete.py", line 632, in sample_batch
    assert number_chain_steps < self.T
AssertionError

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
wandb: Waiting for W&B process to finish... (failed 1).
wandb: 
wandb: Run history:
wandb:       test/E_kl ▁
wandb:       test/X_kl ▁
wandb: test/charges_kl ▁
wandb:  test/epoch_NLL ▁
wandb: 
wandb: Run summary:
wandb:       test/E_kl 106.85912
wandb:       test/X_kl 3.43726
wandb: test/charges_kl 0.59519
wandb:  test/epoch_NLL 111.44704
wandb: 
wandb: You can sync this run to the cloud by running:
wandb: wandb sync /extra/rislek/ConStruct-Thesis/wandb/offline-run-20250703_134842-sjrov7w6
wandb: Find logs at: ./wandb/offline-run-20250703_134842-sjrov7w6/logs
