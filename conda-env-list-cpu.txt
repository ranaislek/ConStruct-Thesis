Perfect approachâ€”hereâ€™s your **step-by-step, CPU-only, totally clean local install guide**, rewritten for maximum clarity and reproducibility.
**(You can copy-paste this into your README or keep as your personal workflow.)**

---

## ðŸš¦ Bulletproof Environment Setup (CPU-only, Local)

### 0. **Remove Any Existing Construct Environment**

```bash
conda deactivate || true
conda env remove -n construct || true
```
**Youâ€™re now cluster-compatible, but 100% safe for local CPU.**
If you ever mess it up: `conda env remove -n construct` and start fresh with this doc.

If you want an extra step to clean all pip/conda cache to save disk, add:

```bash
conda clean --all
pip cache purge
```

right after removing the env.

*Always start clean. This wipes any conflicting settings or broken packages.*

---

### 1. **Create and Activate the Fresh Conda Environment**

```bash
conda create -y -c conda-forge -n construct python=3.9 rdkit=2023.03.2
conda activate construct
```

---

### 2. **Check RDKit Installation**

```bash
python -c "from rdkit import Chem"
# No output/error = it works.
```

---

### 3. **(Optional) Install graph-tool**

*Skip if only using molecular datasets (e.g., QM9).*

```bash
conda install -c conda-forge graph-tool=2.45
python -c "import graph_tool as gt"
```

*If you donâ€™t need it, donâ€™t installâ€”it brings tons of dependencies.*

---

### 4. **Install PyTorch (CPU-only!) and torch-geometric**

```bash
pip install torch==2.0.1
pip install torch-geometric==2.3.1
python -c "import torch; print(torch.cuda.is_available())"  # Should print False
```

*Never use CUDA wheels (`+cu118`) locally without a GPU.
If you see anything mentioning CUDA in pip outputâ€”stop and redo with the above command!*

---

### 5. **Install fcd (Code Only, No Dependencies)**

```bash
pip install --no-deps fcd
```

*This avoids breaking your working torch/rdkit.*

---

### 6. **Install Everything Else**

```bash
pip install -r requirements.txt
# Double-check this doesn't pull wrong torch/rdkit versions (read pip output!).
```

---

### 7. **Install Your Project in Editable Mode (if needed)**

```bash
pip install -e .
```

---

### 8. **Compile ORCA (if needed)**

```bash
cd ./ConStruct/analysis/orca
g++ -O2 -std=c++11 -o orca orca.cpp
cd -
```

---

### 9. **Test Sanity**

```bash
python -c "import fcd; print(hasattr(fcd, 'load_ref_model'))"
python -c "import torch; print(torch.cuda.is_available())"
```

*Both should run without errors.
For CUDA, you should see: `False`.*

---

## ðŸ”— **Quick Table: Local, CPU-Only**

| Step                  | Command                                                                  |
| --------------------- | ------------------------------------------------------------------------ |
| Remove env            | `conda env remove -n construct`                                          |
| Create env            | `conda create -y -c conda-forge -n construct python=3.9 rdkit=2023.03.2` |
| Activate env          | `conda activate construct`                                               |
| (Optional) graph-tool | `conda install -c conda-forge graph-tool=2.45`                           |
| PyTorch (CPU)         | `pip install torch==2.0.1`                                               |
| torch-geometric       | `pip install torch-geometric==2.3.1`                                     |
| fcd (no-deps)         | `pip install --no-deps fcd`                                              |
| Other packages        | `pip install -r requirements.txt`                                        |
| Your package          | `pip install -e .`                                                       |
| ORCA                  | `g++ -O2 -std=c++11 -o orca orca.cpp`                                    |

---

Note: **youâ€™re safe to set up locallyâ€”just donâ€™t use the CUDA wheels.**
